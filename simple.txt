example =01

x = 10 # variable assigning value to x
y = 20 
print(x)# we print x as individual as well as both
print(x,y)
------------------------------------------------------
Example =02

x = 10   # variable assigning value to x
y = 20 


temp = 0      #here i want to rearrange the value of x and y shift the value of x into y and y into x ,we take
             temporary varibale =0 
temp = x     #we called to temp value that kept the value of x 
x = y        # here value of y = x
y = temp     # the store value of x that we kept in temporary variable it will assign to y
print (x,y)


##########
#EXAMPLE 03###
a=20
b=30
c=40   
#a=30,b=40,c=20 convert the value 
# 1: throug temp variable 
# 2: through decleration like a=b ,b=c, c=a
# 3: through operation like =,-
----------------------------------------------------

  (a) ## through temperory varibale #3
temp =0
temp = a
a=b

b=c  

c= temp
print("a =", a ,"b =", b , "c =", c)
-
#################

  (b)   ### through declerative like a=b,b=c,c=a
a=20
b=30
c=40

a, b,  c = b, c, a
  #How it works:
   #a takes b → a = 30

     #b takes c → b = 40

    #c takes a (original, which was 20) → c = 20


print("a =", a ,"b =", b , "c =", c)



###########################
    (c)    ###now through opertaion +,- 
a=20
b=30
c=40
# swap a=30,b=40,c=20
a=a+b+c
c= a-(b+c)

b = a-(c+b)
a = a-(b+c)

print("a=",a, "b=",b ,"c=",c )

#OR#

###
c= a+b+c-(a+b)
b =a+b+c-(c+a)
a =a+b+c-(b+c)
print(c,b,a)



---------------------------------------------
## lec 04 ##
 01::
  name =input("please enter your name :")
print("hello" ,name)
---------------------------
02::
current_year = 2025
yob =  int(input("what year were you born"))
ans = current_year-yob
print(ans)




03:
---------\
find weight in pound
--------------------
name = input("enter your name :")
weight = float(input ("enter you weight in kg:"))
pounds = weight + 2.20462
print( name, "weight in pounds:", pounds)

-------------------------------------------
---------------------------------------------
04 ::
enter student name in dictionary that give the score also
===========================================================
 #(a)
 key=None
studentDict={}

while key!=5:

    print("1: Add Student ")
    print("2: View All Students and Scores ")
    print("3: Search for Student ")
    print("4 Remove a Student ")
    print("5: Exit")

    

    key=int(input("Enter your choice : "))

    if key==1:
        name=input("enter name : ")
        studentDict[name]=int(input("enter score : "))
    elif key==2:
        print(studentDict)
    elif key==3:
         name=input("enter stduent name : ")
         if name in studentDict:
            print(studentDict[name])
         else:
             print("not in dictionary")
    elif key==4:
        name=input("enter stduent name : ")
        if name in studentDict:
            del studentDict[name]
        else:
            print("not in the dictionary")
    elif key==5:
        exit()
    else:
        print("choose specific options")
        continue

=========================
#(b)
student_record = {}
option = -1
while option != 6:
    option = int(input('Enter 1 for add, 2 for view for all students, 3 for search, 4 for remove, 5 option for welcoem to vscode, 6 for exit: '))
    
    if option == 1:
        student_name = input('Enter new student name: ')
        student_score = int(input('Enter student scores: '))
        
        student_record[student_name] = student_score
        
    elif option == 2:
        # for name in student_record.keys():
        print(student_record)
        
    elif option == 3:
        student_name = input('Enter student name to search it\'s score: ')
        if student_name in student_record:
            print(f'The score of student {student_name} is {student_record[student_name]}')
        else:
            print('Student not found in the dictonary')
    
    elif option == 4:
        student_name = input('Enter student name to remove: ')
        student_record.pop(student_name, 'Student does not exists')
        
    elif option == 5:
        print('Welcome to VSCode')
    elif option == 6:
        print('Exiting the program. Goodbye!')
    
    else:
        print('Invalid input detected. Please try again.')
=========================================================================
=========================================================================
   while loop example :while loop os used when u don't know how many time the loop will be run.
number = 5
guess_number  = False
while guess_number != True:
    guess_number = int(input("Guess a number between 1 to 10: "))
    if guess_number == number:
        print("You win")
        guess_number = True
    else:
        print("Try again")   


        ==================================================================
        ##this command is use for specific day in a month such as on 2 sept day is tuesday##
        ====================================================================================
#import calendar

#day = calendar.weekday(2025,9,2)
#days =["mon","tue","wed","thu","fri","sat","sun"]
#print("september 2,2025 is a" ,days[day]) 
  ======================================================================
  =====================================================================
            create window widget calender with highlight event 
            ======================================================
            import tkinter as tk
from tkcalendar import Calendar
import datetime
root = tk.Tk()
root.title("calendar with highlighted date")
cal = Calendar(root, selectmode = "day", year = 2025,month =9, day = 2)
cal.pack(pady =25)
special_date = datetime.date(2025,9,10)
cal.calevent_create(special_date , "special day", "reminder")
cal.tag_config("reminder", background = "black", foreground = "white")
root.mainloop()

===========================================================================
 ## Example##       define 2 function name input hello dear(name )age hello dear (age).
        =======================================================================


def input_name(name):
    print("hello dear: ", name)

def input_age(age):
    print(" your age is: ", age)
for i in range(3):
    print("\nuser", i+1 )
    name = input("Enter your name: ")
    age = input("Enter your age: ") 
    input_name(name)
    input_age(age)
    ============================================================================

import json
import os

from datetime import datetime, timedelta
class Book:
     def __init__(self, title, author, isbn , copies = 1):
        self.title = title
        self.author = author
        self.isbn = isbn
        self.copies = copies

        def __str__(self):
            return f"{self.title} by {self.author} (ISBN: {self.isbn}) - Copies: {self.copies}"
        def to_dict(self):
            return {
                "title": self.title,
                "author": self.author,
                "isbn": self.isbn,
                "copies": self.copies
            }
        @classmethod
        def from_dict(cls, data):
            return cls(
                title=data["title"],
                author=data["author"],
                isbn=data["isbn"],
                copies=data.get("copies", 1)
            )
    
class Member:
    def __init__(self, name, member_id,emil):
        self.name = name
        self.member_id = member_id
        self.email = emil
        self.borrowed_books = {}
    def __return_book__(self, book, due_date):
        self.borrowed_books[book.isbn] = {
            "book": book,
            "due_date": due_date
        }
    def Borrowed_books(self):
        return self.borrowed_books
    
    def get_Borrowed_books(self):
        return self.borrowed_books
    def to_dict(self):
        return {
            "name": self.name,
            "member_id": self.member_id,
            "email": self.email,
            "borrowed_books": {
                isbn: {
                    "book": book_info["book"].to_dict(),
                    "due_date": book_info["due_date"].strftime("%Y-%m-%d")
                } for isbn, book_info in self.borrowed_books.items()
            }
        }
    @classmethod
    def from_dict(cls, data):
        member = cls(
            name=data["name"],
            member_id=data["member_id"],
            emil=data["email"]
        )
        member.borrowed_books = {
            isbn: {
                "book": Book.from_dict(book_info["book"]),
                "due_date": datetime.strptime(book_info["due_date"], "%Y-%m-%d")
            } for isbn, book_info in data.get("borrowed_books", {}).items()
        }
        return member

class Library:
    def __init__(self):
        self.books = {}  # Dictionary to store books with ISBN as key
        self.members = {}  # Dictionary to store members with member_id as key
        self.load_data()

    def add_book(self, book):
        if book.isbn in self.books:
            self.books[book.isbn].copies += book.copies
        else:
            self.books[book.isbn] = book
        self.save_data()
        print(f"Book '{book.title}' added/updated successfully.")

    def remove_book(self, isbn):
        if isbn in self.books:
            del self.books[isbn]
            self.save_data()
            print(f"Book with ISBN {isbn} removed successfully.")
        else:
            print("Book not found.")

    def register_member(self, member):
        if member.member_id in self.members:
            print("Member ID already exists. Please choose a different ID.")
            return False
        self.members[member.member_id] = member
        self.save_data()
        print(f"Member '{member.name}' registered successfully.")
        return True

    def remove_member(self, member_id):
        if member_id in self.members:
            del self.members[member_id]
            self.save_data()
            print(f"Member with ID {member_id} removed successfully.")
        else:
            print("Member not found.")  
    def list_books(self):
        if not self.books:
            print("No books available in the library.")
            return
        for book in self.books.values():
            print(book)
    def list_members(self):
        if not self.members:
            print("No members registered in the library.")
            return
        for member in self.members.values():
            print(f"{member.name} (ID: {member.member_id}, Email: {member.email})")

    def save_data(self):
        with open("books.json", "w") as book_file:
            json.dump({isbn: book.to_dict() for isbn, book in self.books.items()}, book_file)
        with open("members.json", "w") as member_file:
            json.dump({member_id: member.to_dict() for member_id, member in self.members.items()}, member_file)
            
    def load_data(self):
        if os.path.exists("books.json"):
            with open("books.json", "r") as book_file:
                books_data = json.load(book_file)
                self.books = {isbn: Book.from_dict(data) for isbn, data in books_data.items()}
        else:
            self.books = {}

        if os.path.exists("members.json"):
            with open("members.json", "r") as member_file:
                members_data = json.load(member_file)
                self.members = {member_id: Member.from_dict(data) for member_id, data in members_data.items()}
        else:
            self.members = {}
# Group D: Issue and Return Module
class IssueReturn:
    def __init__(self, library):
        self.library = library

    def issue_book(self, member_id, isbn, days=14):
        if member_id not in self.library.members:
            print("Member not found.")
            return False
        if isbn not in self.library.books:
            print("Book not found.")
            return False
        book = self.library.books[isbn]
        if book.copies < 1:
            print("No copies available for this book.")
            return False
        due_date = datetime.now() + timedelta(days=days)
        member = self.library.members[member_id]
        member.__return_book__(book, due_date)
        book.copies -= 1
        self.library.save_data()
        print(f"Book '{book.title}' issued to member '{member.name}'. Due date: {due_date.strftime('%Y-%m-%d')}")
        return True

    def return_book(self, member_id, isbn):
        if member_id not in self.library.members:
            print("Member not found.")
            return False
        member = self.library.members[member_id]
        if isbn not in member.get_Borrowed_books():
            print("This book was not borrowed by the member.")
            return False
        book_info = member.get_Borrowed_books().pop(isbn)
        book = book_info["book"]
        book.copies += 1
        self.library.save_data()
        print(f"Book '{book.title}' returned by member '{member.name}'.")
        return True

# Group E: Search Module
class Search:
    def __init__(self, library):
        self.library = library

    def search_by_title(self, title):
        results = [book for book in self.library.books.values() if title.lower() in book.title.lower()]
        if results:
            for book in results:
                print(book)
        else:
            print("No books found with that title.")

    def search_by_author(self, author):
        results = [book for book in self.library.books.values() if author.lower() in book.author.lower()]
        if results:
            for book in results:
                print(book)
        else:
            print("No books found by that author.")

    def search_by_isbn(self, isbn):
        if isbn in self.library.books:
            print(self.library.books[isbn])
        else:
            print("No book found with that ISBN.")
# Group F: Authentication System
class AuthSystem:
    def __init__(self):
        self.users = {}  # Dictionary to store user credentials
        self.load_data()

    def register(self, username, password, role="member"):
        if username in self.users:
            print("Username already exists. Please choose a different username.")
            return False
        self.users[username] = {"password": password, "role": role}
        self.save_data()
        print("Registration successful!")
        return True

    def login(self, username, password):
        if username in self.users and self.users[username]["password"] == password:
            print("Login successful!")
            return self.users[username]["role"]
        print("Invalid username or password.")
        return None

    def save_data(self):
        with open("auth_data.json", "w") as file:
            json.dump(self.users, file)

    def load_data(self):
        try:
            with open("auth_data.json", "r") as file:
                self.users = json.load(file)
        except FileNotFoundError:
            self.users = {}  # Initialize empty if file not found
# Group G: Main Application Interface
class LibraryManagementSystem:
    def __init__(self):
        self.library = Library()
        self.auth_system = AuthSystem()
        self.issue_return = IssueReturn(self.library)
        self.search = Search(self.library)
        self.current_user_role = None

    def main_menu(self):
        while True:
            if not self.current_user_role:
                print("\n--- Welcome to the Library Management System ---")
                print("1. Login")
                print("2. Register")
                print("3. Exit")
                choice = input("Choose an option: ")
                if choice == "1":
                    self.login()
                elif choice == "2":
                    self.register()
                elif choice == "3":
                    break
                else:
                    print("Invalid choice. Please try again.")
            else:
                self.user_menu()
    def login(self):    
        username = input("Username: ")
        password = input("Password: ")
        role = self.auth_system.login(username, password)
        if role:
            self.current_user_role = role
    def register(self):
        username = input("Choose a username: ")
        password = input("Choose a password: ")
        role = input("Enter role (admin/member): ").strip().lower()
        if role not in ["admin", "member"]:
            print("Invalid role. Defaulting to 'member'.")
            role = "member"
        self.auth_system.register(username, password, role)
    def logout(self):
        self.current_user_role = None
        print("Logged out successfully.")
        def library_menu(self):
            while self.current_user_role:
                print(f"\n--- {self.current_user_role.capitalize()} Menu ---")
                print("1. Add Book" if self.current_user_role == "admin" else "")
                print("2. Remove Book" if self.current_user_role == "admin" else "")
                print("3. Register Member" if self.current_user_role == "admin" else "")
                print("4. Remove Member" if self.current_user_role == "admin" else "")
                print("5. List Books")
                print("6. List Members" if self.current_user_role == "admin" else "")
                print("7. Issue Book")
                print("8. Return Book")
                print("9. Search Books")
                print("10. Logout")
                choice = input("Choose an option: ")
                if choice == "1" and self.current_user_role == "admin":
                    self.add_book()
                elif choice == "2" and self.current_user_role == "admin":
                    self.remove_book()
                elif choice == "3" and self.current_user_role == "admin":
                    self.register_member()
                elif choice == "4" and self.current_user_role == "admin":
                    self.remove_member()
                elif choice == "5":
                    self.library.list_books()
                elif choice == "6" and self.current_user_role == "admin":
                    self.library.list_members()
                elif choice == "7":
                    self.issue_book()
                elif choice == "8":
                    self.return_book()
                elif choice == "9":
                    self.search_books()
                elif choice == "10":
                    self.logout()
                else:
                    print("Invalid choice or insufficient permissions. Please try again.")
                    def member_menu(self):
                        while self.current_user_role == "member":
                            print("\n--- Member Menu ---")
                            print("1. List Books")
                            print("2. Issue Book")
                            print("3. Return Book")
                            print("4. Search Books")
                            print("5. Logout")
                            choice = input("Choose an option: ")
                            if choice == "1":
                                self.library.list_books()
                            elif choice == "2":
                                self.issue_book()
                            elif choice == "3":
                                self.return_book()
                            elif choice == "4":
                                self.search_books()
                            elif choice == "5":
                                self.logout()
                            else:
                                print("Invalid choice. Please try again.")

    def add_book(self):
        title = input("Book Title: ")
        author = input("Author: ")
        isbn = input("ISBN: ")
        try:
            copies = int(input("Number of Copies: "))
        except ValueError:
            print("Invalid number of copies. Setting to 1.")
            copies = 1
        book = Book(title, author, isbn, copies)
        self.library.add_book(book)
    def remove_book(self):
        isbn = input("Enter ISBN of the book to remove: ")
        self.library.remove_book(isbn)
    def register_member(self):
        name = input("Member Name: ")
        member_id = input("Member ID: ")
        email = input("Email: ")
        member = Member(name, member_id, email)
        self.library.register_member(member)
    def remove_member(self):
        member_id = input("Enter Member ID to remove: ")
        self.library.remove_member(member_id)
    def issue_book(self):
        member_id = input("Enter Member ID: ")
        isbn = input("Enter Book ISBN: ")
        try:
            days = int(input("Enter number of days to borrow (default 14): ") or 14)
        except ValueError:
            print("Invalid input. Defaulting to 14 days.")
            days = 14
        self.issue_return.issue_book(member_id, isbn, days)
    def return_book(self):
        member_id = input("Enter Member ID: ")
        isbn = input("Enter Book ISBN: ")
        self.issue_return.return_book(member_id, isbn)
    def search_books(self):
        print("Search by: 1. Title 2. Author 3. ISBN")
        choice = input("Choose an option: ")
        if choice == "1":
            title = input("Enter title to search: ")
            self.search.search_by_title(title)
        elif choice == "2":
            author = input("Enter author to search: ")
            self.search.search_by_author(author)
        elif choice == "3":
            isbn = input("Enter ISBN to search: ")
            self.search.search_by_isbn(isbn)
        else:
            print("Invalid choice.")
    def list_books(self):
        self.library.list_books()
        def list_available_books(self):
            available_books = [book for book in self.library.books.values() if book.copies > 0]
            if not available_books:
                print("No books available in the library.")
                return
            for book in available_books:
                print(book)
    def list_members(self):
        if self.current_user_role != "admin":
            print("Only admins can view the member list.")
            return
        self.library.list_members()
        def view_borrowed_books(self, member_id):
            if member_id not in self.library.members:
                print("Member not found.")
                return
            member = self.library.members[member_id]
            borrowed_books = member.get_Borrowed_books()
            if not borrowed_books:
                print(f"Member '{member.name}' has not borrowed any books.")
                return
            for book_info in borrowed_books.values():
                book = book_info["book"]
                due_date = book_info["due_date"]
                print(f"{book} - Due Date: {due_date.strftime('%Y-%m-%d')}")\
            
# Group H: Unit Testing
def run_tests():
    # Test Book class
    book1 = Book("1984", "George Orwell", "1234567890", 3)
    assert book1.title == "1984"
    assert book1.author == "George Orwell"
    assert book1.isbn == "1234567890"
    assert book1.copies == 3

    # Test Member class
    member1 = Member("Ali", "M001", )
    assert member1.name == "Ali"
    assert member1.member_id == "M001"
    assert member1.email == "abc@gmail.com"
    assert member1.get_Borrowed_books() == {}
    member1.__return_book__(book1, datetime.now() + timedelta(days=14))
    assert len(member1.get_Borrowed_books()) == 1
    assert member1.get_Borrowed_books()[book1.isbn]["book"].title == "1984"
    assert member1.get_Borrowed_books()[book1.isbn]["due_date"] > datetime.now()
    # Test Library class
    library = Library() 
    library.add_book(book1)
    assert book1.isbn in library.books
    assert library.books[book1.isbn].copies == 3
    library.register_member(member1)
    assert member1.member_id in library.members

    # Test AuthSystem class
    auth_system = AuthSystem()
    assert auth_system.register("admin", "password", "admin") == True
    assert auth_system.register("admin", "password", "admin") == False  # Duplicate
    assert auth_system.login("admin", "password") == "admin"
    assert auth_system.login("admin", "wrongpassword") == None
    print("All tests passed!")

if __name__ == "__main__":
    run_tests
    system = LibraryManagementSystem()
    system.main_menu()



    